%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.WS
%import common.C_COMMENT
%import common.CPP_COMMENT

%ignore WS
%ignore C_COMMENT
%ignore CPP_COMMENT

?start: entries*

?entries: sprite
        | stage
        | library
        | use_stmt

use_stmt: "use " (keyword|string) ["as" keyword] ";"

string : ESCAPED_STRING
number : SIGNED_NUMBER
KEYWORD: ("a".."z"|"0".."9"| "_")+
keyword: KEYWORD

sprite: "sprite" keyword "{" sprite_stmts* "}"
stage: "stage" "{" sprite_stmts* "}"
library: "library" "{" library_stmts* "}"

?sprite_stmts: (hat|hat_custom_block|hat_init|costume_stmt|sound_stmt)
?library_stmts: (hat_custom_block|hat_init)

costume_stmt: "costume" (keyword|string) ["as" keyword] ";"
sound_stmt: "sound" (keyword|string) ["as" keyword] ";"

hat: "on" keyword arguments? "{" code_stmts* "}" ";"?

hat_init: "init" "{" code_stmts* "}" ";"?

hat_custom_block: "func" keyword arguments_custom_block? "{" code_stmts* "}" ";"?

hat_loop: keyword arguments? "{" code_stmts* "}" ";"?

if_loop: if_loop_if if_loop_elif* if_loop_else? ";"?

if_loop_if: "if" "("? expression ")"? "{" code_stmts* "}"
if_loop_elif: ("elif"|"elseif") "("? expression ")"? "{" code_stmts* "}"
if_loop_else: "else" "{" code_stmts* "}"

code_stmts: variable_define
          | variable_set
          | function
          | hat_loop
          | if_loop

variable_define: var_locality var_type type? keyword ["=" expression] ";"?

variable_set: keyword variable_set_ops expression ";"?

!variable_set_ops: ("=" | "+="| "-=" | "*=" | "/=" )

function: keyword (arguments|";"|arguments ";")

expression: (string | number)
          | TRUE -> true
          | FALSE -> false
          | math_expr
          | array
          | keyword

TRUE.6: "true" | "True"
FALSE.6: "false" | "False"

!math_expr_ops: ("+"|"-"|"/"|"*"|"%"|"<"|"<="|"!="|"=="|">"|">=")

math_expr: | parenthesis_expression
           | expression math_expr_ops expression
           | not_expr expression

parenthesis_expression.-100: "(" expression ")"

not_expr: "not"

arguments: "(" list? ")"

arguments_custom_block: "(" list_custom_block? ")"

list_custom_block: keyword_custom_block ("," keyword_custom_block)*

keyword_custom_block: keyword [":" (optional type | type)]

optional: "optional"

list: expression ("," expression)*
array: "[" list "]"

!var_locality: ("sprite"|"global"|"cloud")

!var_type: ("const"|"var"|"list")

type.-1   : "number" -> type_number
          | "string" -> type_string
          | "bool" -> type_bool
          | "value"|"any" -> type_value
          | keyword -> type_custom